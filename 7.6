#include <iostream>
#include <iomanip>
#include <cctype>
#include <string>
#include <vector>

int main() {
    std::string text;                                       // 要搜索的文本
    std::string letters;
    std::cout << "输入以 * 结束的文本:\n";
    std::getline(std::cin, text, '*');
    std::cout << "\n输入要查找的单词首字母: ";
    std::cin >> letters;

    const std::string separators {" ,;:.\"!?'\n"};        // 单词分隔符
    std::vector<std::string> words;                         // 找到的单词
    const size_t perline {5};                               // 每行输出的单词数
    size_t count {};                                        // 找到的单词数
    for (auto ch : letters) {
        size_t start {text.find_first_not_of(separators)};  // 第一个单词的起始索引
        size_t max_length {};                               // 最长单词长度
        while (start != std::string::npos) {
            auto end = text.find_first_of(separators, start + 1);  // 单词的结束位置
            if (end == std::string::npos)
                end = text.length();
            auto word = text.substr(start, end - start);    // 记录单词
            if (std::toupper(word[0]) == std::toupper(ch)) {  // 如果以当前字母开头...
                words.push_back(word);                       // ...保存单词
                if (max_length < word.length())
                    max_length = word.length();
            }
            start = text.find_first_not_of(separators, end + 1);  // 查找下一个单词的第一个字符
        }
        // 列出以当前字母开头的单词
        std::cout << "\n以 '" << ch << "' 开头的单词有:\n";
        for (auto& word : words) {
            std::cout << std::setw(max_length + 2) << std::left << word;
            if (++count % perline == 0)
                std::cout << std::endl;
        }
        std::cout << std::endl;
        words.clear();
        count = 0;
    }
}
